#!/bin/bash

# nvm::install install node -v
nvm::install() {
  vm::ensure

  local version=$1
  if [ -z "$version" ]; then
    version=$PLUGIN_NVM_NODE_DEFAULT_VERSION
  elif [ "$version" = "default" ]; then
    version=$PLUGIN_NVM_NODE_DEFAULT_VERSION
  elif [ "$version" = "lts" ]; then
    version=$PLUGIN_NVM_NODE_LTS_VERSION
  elif [ "$version" = "latest" ]; then
    version=$PLUGIN_NVM_NODE_DEFAULT_VERSION
  fi

  # search local
  if [ "$(nvm::has_version_local $version)" = "true" ]; then
    log::info "you have installed version: $(color::green $version)"
    exit 0
  fi

  # infer latest version
  local latest_version=$(vm::get_latest_version $version)
  if [ "$latest_version" = "" ]; then
    log::error "[$(timestamp)] can not find version: $(color::red $version)"
    exit 1
  fi

  local raw_version=$version
  version=$latest_version
  log::info "[$(timestamp)] installing $raw_version ($version) ..."

  local node_home=${PLUGIN_NVM_VERSIONS}/${version}
  if [ -d "$node_home" ]; then
    # log::info "[$(timestamp)] node ${version} already installed"
    os::inquirer ok "confirm" "node ${version} already installed, confirm to reinstall ?"
    if [ "$ok" != "true" ]; then
      log::info "CANNELED"
      exit 0
    fi

    # log::info "[$(timestamp)] removing node ${version} ..."
    # sudo rm -rf $node_home
    log::info "[$(timestamp)] reinstalling node ${version} ..."
  fi

  # 1. get version (vm::version_parse only use in install)
  # local version=$(vm::version_parse $version_raw)
  # 2. get download url
  local url=$(nvm::internal_install_get_download_url $version)

  # 3. download
  nvm::internal_install_download $version $url
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to download node ${version}."
    return 1
  fi

  # 4. apply local
  nvm::internal_install_apply_local $version
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to apply node ${version}."
    return 1
  fi

  # if no current, set current
  if [ "$(nvm::current)" == "" ]; then
    nvm::use $version
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to use node ${version}."
      return 1
    fi
  else
    # apply env
    nvm::env
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to apply node env."
      return 1
    fi
  fi

  log::success "[$(timestamp)] install $raw_version ($version) success"
}

# nvm::internal_install_get_download_url get download url
nvm::internal_install_get_download_url() {
  local version=$(vm::version_parse $1)
  local os=$(vm::os)
  local arch=$(vm::arch)

  # @PATCH
  # node < v16 && macos && m1 not support
  local major_version=$(echo ${version#v} | awk -F "." '{print $1}')
  if [ "${major_version}" -lt "16" ] && [ "$os" = "darwin" ] && [ "$arch" = "arm64" ]; then
    arch="x64"
  fi

  # local filename=go${version}.${os}-${arch}.tar.gz
  local filename=node-v${version}-${os}-${arch}.tar.gz
  local tar_gz_url=${PLUGIN_NVM_NODE_SOURCE_OFFICIAL}/v${version}/$filename
  if [ "$(net::is_google_visitable)" = "false" ]; then
    tar_gz_url=${PLUGIN_NVM_NODE_SOURCE_CHINA}/v${version}/$filename
  fi

  # force cn mirror
  if [ -n "${FORCE_CN}" ]; then
    tar_gz_url=${PLUGIN_NVM_NODE_SOURCE_CHINA}/v${version}/$filename
  fi

  # custom source
  if [ -n "${GO_SOURCE}" ]; then
    tar_gz_url=${GO_SOURCE}/v${version}/$filename
  fi

  echo $tar_gz_url
}

nvm::internal_install_download() {
  local version=$1
  local tar_gz_url=$2
  if [ -z "$version" ]; then
    log::error "[nvm::internal_install_download] version is required"
    exit 1
  fi

  if [ -z "$tar_gz_url" ]; then
    log::error "[nvm::internal_install_download] tar_gz_url is required"
    exit 1
  fi

  # 302 redirect
  if [ "$(net::status_code $tar_gz_url)" = "302" ]; then
    local location=$(os::curl -I $tar_gz_url 2>/dev/null | grep location | awk '{print $2}')

    # fix location
    # stackoverflow: https://stackoverflow.com/questions/70660633/curl-3-url-using-bad-illegal-format-or-missing-url-in-bash-windows
    location=$(echo $location | sed 's/\r//g')

    # 404
    if [ "$(net::is_not_found $location)" = "true" ]; then
      log::error "[nvm::install] invalid version: $version"
      log::error "[nvm::install] see more version at $PLUGIN_NVM_NODE_SOURCE_OFFICIAL"
      exit 1
    fi
  else
    # 404
    if [ "$(net::is_not_found $tar_gz_url)" = "true" ]; then
      log::error "[nvm::install] invalid version: $version"
      log::error "[nvm::install] see more version at $PLUGIN_NVM_NODE_SOURCE_OFFICIAL"
      exit 1
    fi
  fi

  # download
  # os::wget -c $tar_gz_url -O $PLUGIN_NVM_NODE_DOWNLOAD_TMP
  os::curl --progress-bar -fSL $tar_gz_url -o $PLUGIN_NVM_NODE_DOWNLOAD_TMP
}

nvm::internal_install_apply_local() {
  local os=$(vm::os)
  local arch=$(vm::arch)

  local version=$1
  if [ -z "$version" ]; then
    log::error "[nvm::internal_install_apply_local] version is required"
    exit 1
  fi

  # add prefix v*
  version=$(vm::version_ensure_prefix_v $version)

  # @PATCH
  # node < v16 && macos && m1 not support
  local major_version=$(echo ${version#v} | awk -F "." '{print $1}')
  if [ "${major_version}" -lt "16" ] && [ "$os" = "darwin" ] && [ "$arch" = "arm64" ]; then
    arch="x64"
  fi

  # clean old
  if [ -d "$PLUGIN_NVM_VERSIONS/$version" ]; then
    sudo rm -rf $PLUGIN_NVM_VERSIONS/$version
  fi
  # decompress
  sudo tar -C $PLUGIN_NVM_VERSIONS -xzf $PLUGIN_NVM_NODE_DOWNLOAD_TMP
  # rename
  sudo mv $PLUGIN_NVM_VERSIONS/node-${version}-${os}-${arch} $PLUGIN_NVM_VERSIONS/$version
  # add tag
  echo "CreatedAt: $(timestamp)" | sudo tee $PLUGIN_NVM_NODE_TAG >>/dev/null

  # clean
  sudo rm -f $PLUGIN_NVM_NODE_DOWNLOAD_TMP
}

export -f nvm::install

# install internal processes
export -f nvm::internal_install_get_download_url
export -f nvm::internal_install_download
export -f nvm::internal_install_apply_local
